func DBFind(table string).Select(query string).Columns(columns string).Where(where map)
.WhereId(id int).Order(order string).Limit(limit int).Offset(offset int).Group(group string).All(all bool) array {
    return DBSelect(table, columns, id, order, offset, limit, where, query, group, all)
}

func One(list array, name string) string {
    if list {
        var row map
        row = list[0]
        if Contains(name, "->") {
            var colfield array
            var val string
            colfield = Split(ToLower(name), "->")
            val = row[Join(colfield, ".")]
            if !val && row[colfield[0]] {
                var fields map
                var i int
                fields = JSONDecode(row[colfield[0]])
                val = fields[colfield[1]]
                i = 2
                while i < Len(colfield) {
                    if GetType(val) == "map[string]interface {}" {
                        val = val[colfield[i]]
                        if !val {
                            break
                        }
                        i = i + 1
                    } else {
                        break
                    }
                }
            }
            if !val {
                return ""
            }
            return val
        }
        return Str(row[name])
    }
    return ""
}

func Row(list array) map {
    var ret map
    if list {
        ret = list[0]
    }
    return ret
}

func DBRow(table string).Columns(columns string).Where(where map)
.WhereId(id int).Order(order string) map {

    var result array
    result = DBFind(table).Columns(columns).Where(where).WhereId(id).Order(order)

    var row map
    if Len(result) > 0 {
        row = result[0]
    }

    return row
}

func ConditionById(table string, validate bool) {
    var row map
    row = DBRow(table).Columns("conditions").WhereId($Id)
    if !row["conditions"] {
        error Sprintf("Item %d has not been found", $Id)
    }

    Eval(row["conditions"])

    if validate {
        ValidateCondition($Conditions,$ecosystem_id)
    }
}

func CurrentKeyFromAccount(account string) int {
    var row map
    row = DBRow("@1keys").Columns("id").Where({"account": account, "deleted": 0})
    if row {
        return row["id"]
    }
    return 0
}
